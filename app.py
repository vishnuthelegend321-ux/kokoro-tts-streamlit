import streamlit as st
from TTS.api import TTS
import os

# --- Main App Configuration ---
st.set_page_config(
    page_title="Multilingual AI Narrator",
    page_icon="ðŸ¤–"
)

st.title("ðŸ¤– Multilingual AI Narrator (Kokoro TTS)")
st.warning("This app uses a large AI model (>1GB). The first startup will be very slow. It may fail on free hosting due to high memory usage.")

# --- Model Definition ---
# This is a powerful multilingual model that supports many languages including English (en) and Hindi (hi)
# It uses a default female voice for generation.
MODEL_NAME = "tts_models/multilingual/multi-dataset/xtts_v2"

# --- Caching the Model ---
# This is CRITICAL. It loads the model only once.
@st.cache_resource
def load_tts_model():
    try:
        # This will download the model on the first run
        return TTS(MODEL_NAME)
    except Exception as e:
        st.error(f"Error loading model. The server likely ran out of memory. Details: {e}")
        return None

# --- UI Elements ---
st.markdown("### 1. Select Language")
language = st.selectbox("Choose the language of the text:", ("English", "Hindi"))
lang_code = "en" if language == "English" else "hi"

st.markdown("### 2. Enter Text")
text_to_convert = st.text_area(f"Paste your {language} text here:", height=150, value="Hello, this voice is generated by a local AI model.")

# --- Generate Button ---
st.markdown("### 3. Generate Audio")
generate_button = st.button("Generate Audio", type="primary")

# --- Main Logic ---
if generate_button:
    if text_to_convert:
        # Load the model (or get it from cache)
        with st.spinner(f"Loading the AI model... This can take several minutes the first time."):
            tts_model = load_tts_model()
        
        if tts_model:
            with st.spinner("Generating audio... This may also take a moment."):
                try:
                    output_file_path = "narration_multilingual.wav"
                    
                    # Generate the speech with the correct language code
                    tts_model.tts_to_file(
                        text=text_to_convert, 
                        file_path=output_file_path,
                        language=lang_code
                    )
                    
                    st.success("âœ… Success! Audio generated.")
                    st.audio(output_file_path)

                    with open(output_file_path, "rb") as file:
                        st.download_button(
                            label="Download WAV File",
                            data=file,
                            file_name="narration.wav",
                            mime="audio/wav"
                        )
                except Exception as e:
                    st.error(f"An error occurred during audio generation: {e}")
    else:
        st.warning("Please enter some text to generate audio.")
